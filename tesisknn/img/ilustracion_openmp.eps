%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 435.000000 300.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 435 300
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 435 300
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /t put
dup 34 /zero put
dup 35 /one put
dup 36 /two put
dup 37 /N put
dup 38 /Q put
dup 39 /u put
dup 40 /e put
dup 41 /r put
dup 42 /i put
dup 43 /s put
dup 44 /D put
dup 45 /a put
dup 46 /b put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<

206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070065B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F4B80009DC00B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C70002002AFFF5020202C50017003300CBB800342FB800352FB8003410B80018D0B800182FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8003510B80026DCB8000EDC410500DA000E00EA000E00025D411B0009000E0019000E0029000E0039000E0049000E0059000E0069000E0079000E0089000E0099000E00A9000E00B9000E00C9000E000D5D00BA0013001F00032BB8001310BA002D000700032BB8002D10303113343E0433321E0415140E0223222E0227141E0433323E0435342E0423220E0484010911213224243221110901051B3C36363C1B055A04101E344F37384E341E100404101E344F37374F341E1004015D1A3F3F3C2D1C1C2D3C3F3F1A2863573C3C57632727545047361F1F364750542727545048362020364850540000000100570000016402C5000A0023BA0001000900032BB800011000B800012FB800002FBA0007000800032BB800071030312111230E03231533110164410726374424B802C528341E0B44FE0400010018000001EE02C5002B0091B8002D2FBA0001000000032BB8000110B8002D10B80022DCB8000BDC410500DA000B00EA000B00025D411B0009000B0019000B0029000B0039000B0049000B0059000B0069000B0079000B0089000B0099000B00A9000B00B9000B00C9000B000D5DB8002210B80016D0B800162FB8000110B80018D0B800182F00BA0018001500032BBA0027000600032BB800271030311333263E0233321E0215140E02070E03072135213E03373E0335342E0223220E022C55010F2235251C322516172D442D254436230501CFFE940627374221213E301D233C512E38583B1C01CA203F321F12
222F1D2538302F1C163242593F4B21332C2714152E39482F324C331B26435C000002004E0000029A02CA000E0019007DB8001B2FBA0001000F00032BB8000110B8001B10B80016DCB80007DC410500DA000700EA000700025D411B0009000700190007002900070039000700490007005900070069000700790007008900070099000700A9000700B9000700C90007000D5D00BA0000001000032BB8000010BA000F000100032BB8000F103031371133321E0215140E0423031133323E0235342623ADA0425A39191B2A35363010FDF559825428B2A550022A25476540425D3E241305027AFD36325F8B5AACA80000000001004D0000028602CA000B004BBA0003000000032BB8000310BA0007000800032BB8000710B8000810B8000AD0B8000A2F00B800012FB800052FB800002FB800072FBA000400010000111239BA000A0001000011123930311311331133013311231123014D5A020175685A02FE8802CAFD36023DFDC302CAFDBD024300000000020026FFC302D202DB0016002D00E1B8002E2FB8002F2FB8002E10B80026D0B800262FB8002F10B8001CDCBA00020026001C111239B8002610B80009DC411B0006000900160009002600090036000900460009005600090066000900760009008600090096000900A6000900B6000900C60009000D5D410500D5000900E5000900025DB8001C10B80013DC410500DA001300EA001300025D411B0009001300190013002900130039001300490013005900130069001300790013008900130099001300A9001300B9001300C90013000D5D00B800172FBA0004002B00032BB8000410BA0021000E00032BB800211030312507170623222E0235343E0233321E02151406071737273E0135342E0223220E0215141E0233323701C2324F3033415E3C1C1C3C5E41415E3C1C282A73305E36362B5680555580562B2B5680556348CC3A3F1433546936366954333354693642792ABD3C4A3694524987683E3E6887494987683D2A000000020024FFF5020A021100300042015CB800142BBB00380003000D00182BBB002A0003001700182BB8001710B80005D0B800052F4111000600380016003800260038003600380046003800560038006600380076003800085D4105008500380095003800025DB8003810B900200003F4B9001F0003F4B8001710B900300003F4B8001710B80031D0B800312FB8002A10B80044DC00B800014558B800252F1BB9002500083E59B800014558B800022F1BB9000200043E59B800014558B800082F1BB9000800043E59BA000500020025111239B8002510B9001C0002F441050089001C0099001C00025D41110008001C0018001C0028001C0038001C0048001C0058001C0068001C0078001C00085DB8002510B8001FDCB8000210B9002E0002F441110007002E0017


00>] def
/CharStrings 16 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/two 3 def
/D 4 def
/N 5 def
/Q 6 def
/a 7 def
/b 8 def
/e 9 def
/i 10 def
/r 11 def
/s 12 def
/t 13 def
/u 14 def
/uni2B91 15 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec



41AC33A46D8A63919819E5EA347ED50F13F0E2A4F7E76DB8FB8678F80B64157B30EEEC36B05ACC58508ADA0D2A765D1E987DC1BE27A9C8C5762262965F66D958FAC77902A6DB34BAFD74DE66AEA4029203D815C8FEF4F5B215EC4BC3F0BBA88D2B7B2F3A93A97CF80DB86FC0C61AFE1C176017D8291E4DF5898FB88F5B6C951CE86A3C22003CDAD443F69EADBFF030D6AD7E321E085B7FA3E85BFDADB2CE7D7242DE76194482C457A86CFE4E7B8682DD8F5122BBE0DD9364DCD3129BE4DFAE74CDF43C7062AD25448645DAC201B3C687017614F322407D30C0B0B95FEB461D7EF074F4395D2298918B9674512449C89047EED4CFD9EB72A67C352468948911918779180607FF37FE61F21373E01C20AE3BD005B246407F5D6ED943D765CBD447E1694B72653A914EC34AA6F91133EA682D0F638782BF4B36D5B01B2A3D70CF7BBA22CA67F91F8F061DC499105A371B59FF00B4F6A71DFDD8B92F85A5CB9A1802CCAAB39A58A12EB76458D0ED882FC49128F23B336E2454A6AA53DD298CE7FE156A130D28A92A839B2CE1D9D046E6F219022A5442561B51810D94890073CB02262FCB6ADE6074DC6FA8215C34A370B3273EE50FC332887C5762B086
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: HelveticaNeue-Bold
%!FontType1-1.0: HelveticaNeue-Bold 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /r put
dup 35 /a put
dup 36 /y put
dup 37 /space put
dup 38 /o put
dup 39 /f put
dup 40 /q put
dup 41 /u put
dup 42 /e put
dup 43 /i put
dup 44 /s put
dup 45 /D put
dup 46 /t put
dup 47 /b put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/D 3 def
/a 4 def
/b 5 def
/e 6 def
/f 7 def
/i 8 def
/o 9 def
/q 10 def
/r 11 def
/s 12 def
/t 13 def
/u 14 def
/y 15 def
/uni2B90 16 def
/uni2B91 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1018 -481 1437 1141}def
/UniqueID 4258367 def
currentdict currentfile eexec

5735D63AEAA4019B73481BCAF170EF862A4DCEA279798787A10237B32CB40846D9D8B23197BFE5DC73B9849E744DE94584B9A7D40D260E5B011BFAAFC473F2AA58CC62BCDFB02EB9F033D00D00DECE102CF61E908666B904D43D90BA89640895015F1FFBAE532D7CBB1D64F2956AD13F172A6421F9137031625707ED0E7CE3A01D4865FC549EEB28EF2DC5F0AECC644747138D7E67CED3E6E64D7CAAC4A03E83B46C30CC4B0AA01ADD3605BB1997110E3ABD44D558EAE1B587FB0F1D365D2FAFDC41041A0B14A0D6B51CE946C4122148E90BC61AAB0EF504DCBF0FCE42AE9CEC5105E3BBFB312F3BE38F63478ACC0A3D9FEFF5251A7C335AAC9EA8A32AB2EA64668E04EC12E1491A33CFAE23C530ED6409C2C1AE8F0EC7EA8C13983735B00536E981EAC4C72C150771360D078BFCCA104F5CE5E0BA8939DE5D14DF74114F6646F2D0BDE96192E96BC3A103B3319BB1EBF324A8F643474097EBBAC1284E9CB5948DA91D0C18928F8CE0A9813EAA6DD85C8D868ED7D3089CBC194C23C889890DA36008D3672B21C7D8EA7D42435DABEC517662256F45BDA7B6B31363BE8C9C589DBCA301D0E1E9DAA2579EB0D07A4B5F4BC9401EF6ED2DFD6536E320688827B35D6A4C45E2C5D929D69277EDB26A1B829DC1501011EA0603A6904622D9DA17E3A2E673BE7D7213B109EE1D65961122F4F6F162EDF9DF7CBACF5A76C55BDC8692DAA883D10291E4462719EA1FDAD492291ADA29464F1020D1F77B9690F3C293612AA0A62ED089983477121343A8AFEFFBB1F3D5EA56D938EF5404315EFE06A1F32612DFA5B82EFBC2166EC2BB5C0B4A67624DA76D02B4322DCF8AFD24B01AD962608ED83A7E6B989BD6E6931AA2511AF0C195CCB3E650509FB6B5F9DE42F60428D138D675EFFCC217E1FC7F4DA1D2BA801854C2981EDB7FDBFD4A4B089D62398AB8AB5263C1AB85C1F8F3422D0069C55D3372BFFB1A0B3CDE0C3D0F9CA6D21057407C9846CBA89979952242F28A75A704361F62E482E1170D48D9087016FCD16F47B58ACCBE8AD9A08B37C30BFD98E458EDE63F899DB44EDBA9E7BEEDE529B52281CFE93DD2D78B39B8AB497134EDC9AA2049B38B6AD4D298C67D4EE56FBC66DD6553F35C45D62E58D56E7C3CCF40C6D4D7824B1253266E2B351E79A501FC63C25C995911D8D19E1084DBF604D75DECE58CDC750AD244D7B4C0DEA7FA9E19B7D213C4E0723CA7C991D23353410218E81C09CD8EFDB7E03D96B666642C5131E53013A96C79E55741275FB84B54E41AFC11D098742EC44A73241898719AC50A2CFDE5FF5F96D13458F28A359244A0963FF9CD2D6ED9D24E7EEDE028E763E657C9DD4A218D289358B0032D75DEA88BDF06702DEE2243CDF4788FC31F68ADAC26A8D0217A796F7BCD7C61BF0EEF12032AF0262CF8C0A581CCDC0A45EFD9D68C82A2A0F1
6476255A051F2CF0DFFDBCE3D81E443BF2B3A84D9D318698BA8C390CFC3C115B43DAD93D52112B50D78DB20BC738D8B9E06159C2F6749C8E6F6058FFCEC0D3BB9CEF6C79A6366BD2BC6AE111DB8B4291F6006C316BB3F821430FFF94A0FA5B2CDBC4B685AD07E8A938A0B2BAEF79141D3E48950647234EA00EE560593217CF57AE1C43933D1E1652DDA5A6F651DD85C84B87E1B9E92279643E657B19884108E0A452E9086CEE163B485F61705DE40A8A37A83A2C0DE95C30A5490A5C29903D34FCC044D17130F0ABB711D4C50170EDF251E34C69C8EB5AC801A3F9FB747FF133B5C86233A21D1F45CF6D31BDB6CFCCF59D3CBDAB37254FB5722B6AB35A645BD09C0DDFF0F6E81083F5A3C2869129F5D4FF0B6ECB8FB98AFC067B5AF87E796D41FB16363E75FC92E018A73774956EF3CBE2B289A05664353540153A4409FF964F9682668989D027D637F7638F7051DA22F27B5DCC62F845DC7712E19C26A2F6C0493278B0988F2E680E172A9BB16EA8EDF0EBDD6D0AA34DE7E5481115B283E2FD1353064945D46B6624941AB345E93B1535017029FCA25AB4BC2C41A51F192A165834BA44AEEC7ED02C8BA9100E8F1E53C9B78B28DAF383AE73379FADFC4F99FEA11DB620B0D93D43AB376A1BB14684F42F02D9C78EB549CE9CC39AECBAD93BAF0B770F1863E83DC5CCC7BE58823D3176E5B6AAD6A5CA4A4A63B7302A2F665243E428735BB057CB4EB0AC3C3F9A873BA75BD18F25555F3FD19541EEA93DF212E623D65D93D5D0248AC3F83270128453AA2C37154554840D01561F6FC7584DE1E42F1F5A13C26C45F9B5BCA4862913EA083D53B9CD3C34E70A8B6A5EF4A44D911A35547010921FBA39A83B95611E0424D2EED09D7E710837348369BFA3AB5C32D5B418E26B9A918EE294FCE99367860E11732D21D2CE9270C9942786B0F589D74807D0B3218624D82FB9C7F0D92A9389538F606EBB44202095688F77BFE32E4369DEB5F7ADCE32E5D367FC0AE4744E232E4EDA521374214313AE08EEB78231398D320539FE600C510623F440AF250982EB60E31A72DA5DE38F6190CCFD654B3F2567C830A8633BF40F0DB3C988E318C92E19994D40E7DBE33A03DDAC72AD132210D8DD4E1AD00916989F4033907844B8F5A24C5E2F960AAAAB2C37977EB922DCC818D53CE60594D0FEEFBE90A2B56A31B254D9F1EC840559272F96940F2550C7322184931B5678D24B0EEBF4A477439FD2C5F3BA2519456605996AA43E9700ED70EB5703520AABD007541F64FBCC0A814538EF9BD0F2677BEBB3CA493451B628945584204D3AC304E623CE9DA3228F53189173A4CEE01BB6AAE0DD99DEEBEB55D5C10D1CCB6A28E7D29F7F4C205294316D785717B9D4901F7DB28D2F38C99EBEE6404FBDF8FD0554D81EB59C95BE56FAE3905AB55DBEB94ED440E77AC31BB2EE78
4BC84AB6A38922E2CC791B617F9CBA7CE2E2E7065AFA651ED56A876E948200879BE78F436B43F4FE7167919B47F070BDDC7B3A196CBA9ECE6CC0AD6BB9D48D30B71A6BA63B58A2CBC5A4FCCC2950D9612D90EE92E7CE38756420AA7864F82A354A20D2FB445E84DC59E6BED25E3CD6D68250506A440343A42ACFB1320AEDD7FE8736EAD07B528C00B532570FDC0682A7F6E836FB87A1F0B38E958A0728B8FCE9DCEA9A5AA1514BEF32D6F4024A14B3D83A06A64BFDD49022A2E5408BEFEA37E42B4533431AF947B109F283300C90EE13E61CA629D5622B7FFE312FB499A6C07057D9016575C7B6588C31FF49F378CA958ABBDA875D32BD5033781A6DFE333768C7CB3B06A4E4DB982BAF53BBA50FE63AE12A99F5A75B4A32F06314188AC282D8688591761568E65B65360B48411E62BC7FF25E5796FA9862F002828534D28678A5B68D3A510371FB542988D4FBABDFB2697409954F4E90F5C6AA97472ABD174428AE18CE349A6ABCF9596EEADB6C0221B8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Bold cguidfix
/F2.1/HelveticaNeue-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 435 300 rc
0 300 m
766 300 l
766 -308 l
0 -308 l
h
0 300 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 300 cm
5.03125 87 m
32.5625 87 l
32.5625 112 l
5.03125 112 l
h
5.03125 87 m
S
32.5625 87 m
60.09375 87 l
60.09375 112 l
32.5625 112 l
h
32.5625 87 m
S
60.09375 87 m
87.625 87 l
87.625 112 l
60.09375 112 l
h
60.09375 87 m
S
87.625 87 m
115.15625 87 l
115.15625 112 l
87.625 112 l
h
87.625 87 m
S
115.15625 87 m
142.6875 87 l
142.6875 112 l
115.15625 112 l
h
115.15625 87 m
S
142.6875 87 m
170.21875 87 l
170.21875 112 l
142.6875 112 l
h
142.6875 87 m
S
170.21875 87 m
197.75 87 l
197.75 112 l
170.21875 112 l
h
170.21875 87 m
S
197.75 87 m
225.28125 87 l
225.28125 112 l
197.75 112 l
h
197.75 87 m
S
225.28125 87 m
252.8125 87 l
252.8125 112 l
225.28125 112 l
h
225.28125 87 m
S
252.8125 87 m
280.34375 87 l
280.34375 112 l
252.8125 112 l
h
252.8125 87 m
S
280.34375 87 m
307.875 87 l
307.875 112 l
280.34375 112 l
h
280.34375 87 m
S
307.875 87 m
335.40625 87 l
335.40625 112 l
307.875 112 l
h
307.875 87 m
S
335.40625 87 m
362.9375 87 l
362.9375 112 l
335.40625 112 l
h
335.40625 87 m
S
362.9375 87 m
390.46875 87 l
390.46875 112 l
362.9375 112 l
h
362.9375 87 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 19 252.64151 cm
/F1.1[ 13 0 0 -13 0 0]sf
-2.0474999 4.3180008 m
(!)s
1 0 0 -1 24.9375 246.64151 cm
/F1.1[ 10 0 0 -10 0 0]sf
-2.78 3.8600006 m
(")s
1 0 0 -1 45.140625 252.64151 cm
/F1.1[ 13 0 0 -13 0 0]sf
-2.0474999 4.3180008 m
(!)s
1 0 0 -1 51.078125 246.64151 cm
/F1.1[ 10 0 0 -10 0 0]sf
-2.78 3.8600006 m
(#)s
1 0 0 -1 74.28125 252.64151 cm
/F1.1[ 13 0 0 -13 0 0]sf
-2.0474999 4.3180008 m
(!)s
1 0 0 -1 80.21875 246.64151 cm
/F1.1[ 10 0 0 -10 0 0]sf
-2.78 3.8600006 m
($)s
1 0 0 -1 121.65625 251.64151 cm
/F1.1[ 13 0 0 -13 0 0]sf
-2.0474999 4.3180008 m
(!)s
1 0 0 -1 131.46875 245.64151 cm
/F1.1[ 10 0 0 -10 0 0]sf
-5.5599999 3.8600006 m
(##)[ 5.560000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 300 cm
20.734375 59.358482 m
20.724937 74.458488 l
S
0 i
CM
20.719938 217.54152 m
23.724937 225.53964 l
17.724937 225.5434 l
h
20.719938 217.54152 m
f
0 J
0 j
1 0 0 -1 0 300 cm
20.719938 82.458481 m
23.724937 74.460358 l
17.724937 74.456612 l
h
20.719938 82.458481 m
S
1 J
1 j
0.60000002 i
47.015625 58.858482 m
47.006187 73.958488 l
S
0 i
CM
47.001186 218.04152 m
50.006187 226.03964 l
44.006187 226.0434 l
h
47.001186 218.04152 m
f
0 J
0 j
1 0 0 -1 0 300 cm
47.001186 81.958481 m
50.006187 73.960358 l
44.006187 73.956612 l
h
47.001186 81.958481 m
S
1 J
1 j
0.60000002 i
75.015625 58.858482 m
75.006187 73.958488 l
S
0 i
CM
75.00119 218.04152 m
78.006187 226.03964 l
72.006187 226.0434 l
h
75.00119 218.04152 m
f
0 J
0 j
1 0 0 -1 0 300 cm
75.00119 81.958481 m
78.006187 73.960358 l
72.006187 73.956612 l
h
75.00119 81.958481 m
S
1 J
1 j
0.60000002 i
129.07812 60.858482 m
129.0687 75.958488 l
S
0 i
CM
129.06369 216.04152 m
132.06868 224.03964 l
126.06869 224.0434 l
h
129.06369 216.04152 m
f
0 J
0 j
1 0 0 -1 0 300 cm
129.06369 83.958481 m
132.06868 75.960358 l
126.06869 75.956612 l
h
129.06369 83.958481 m
S
/Cs2 SC
0 sc
1 0 0 -1 154.5 251.14151 cm
/F1.1[ 13 0 0 -13 0 0]sf
-2.0474999 4.3180008 m
(!)s
1 0 0 -1 160.4375 245.14151 cm
/F1.1[ 10 0 0 -10 0 0]sf
-2.78 3.8600006 m
(")s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 300 cm
156.23438 60.858482 m
156.22495 75.958488 l
S
0 i
CM
156.21994 216.04152 m
159.22493 224.03964 l
153.22495 224.0434 l
h
156.21994 216.04152 m
f
0 J
0 j
1 0 0 -1 0 300 cm
156.21994 83.958481 m
159.22493 75.960358 l
153.22495 75.956612 l
h
156.21994 83.958481 m
S
/Cs2 SC
0 sc
1 0 0 -1 182.5 251.14151 cm
/F1.1[ 13 0 0 -13 0 0]sf
-2.0474999 4.3180008 m
(!)s
1 0 0 -1 188.4375 245.14151 cm
/F1.1[ 10 0 0 -10 0 0]sf
-2.78 3.8600006 m
(#)s
1 0 0 -1 211.64062 251.14151 cm
/F1.1[ 13 0 0 -13 0 0]sf
-2.0474999 4.3180008 m
(!)s
1 0 0 -1 217.57812 245.14151 cm
/F1.1[ 10 0 0 -10 0 0]sf
-2.78 3.8600006 m
($)s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 300 cm
184.375 60.358482 m
184.36557 75.458488 l
S
0 i
CM
184.36057 216.54152 m
187.36555 224.53964 l
181.36557 224.5434 l
h
184.36057 216.54152 m
f
0 J
0 j
1 0 0 -1 0 300 cm
184.36057 83.458481 m
187.36555 75.460358 l
181.36557 75.456612 l
h
184.36057 83.458481 m
S
1 J
1 j
0.60000002 i
212.375 60.358482 m
212.36557 75.458488 l
S
0 i
CM
212.36057 216.54152 m
215.36555 224.53964 l
209.36557 224.5434 l
h
212.36057 216.54152 m
f
0 J
0 j
1 0 0 -1 0 300 cm
212.36057 83.458481 m
215.36555 75.460358 l
209.36557 75.456612 l
h
212.36057 83.458481 m
S
2 w
1 J
1 j
0.60000002 i
2 41.858482 m
3 35.25692 l
140.70703 35.870201 l
142 42.358482 l
S
1 w
71 35.721764 m
71 29.978483 l
S
0 i
CM
71 274.74152 m
69.230003 270.02151 l
72.769997 270.02151 l
h
71 274.74152 m
f
0 J
0 j
1 0 0 -1 0 300 cm
71 25.258484 m
69.230003 29.978483 l
72.769997 29.978483 l
h
71 25.258484 m
S
/Cs2 SC
0 sc
1 0 0 -1 262.5 251.14151 cm
/F1.1[ 13 0 0 -13 0 0]sf
-2.0474999 4.3180008 m
(!)s
1 0 0 -1 271.3125 245.14151 cm
/F1.1[ 10 0 0 -10 0 0]sf
-5.5599999 3.8600006 m
(##)[ 5.560000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 300 cm
266.92188 61.358482 m
266.91245 76.458488 l
S
0 i
CM
266.90744 215.54152 m
269.91245 223.53964 l
263.91245 223.5434 l
h
266.90744 215.54152 m
f
0 J
0 j
1 0 0 -1 0 300 cm
266.90744 84.458481 m
269.91245 76.460358 l
263.91245 76.456612 l
h
266.90744 84.458481 m
S
2 w
1 J
1 j
0.60000002 i
147 42.358482 m
148 35.75692 l
285.70703 36.370201 l
287 42.858482 l
S
1 w
216 36.221764 m
216 30.478483 l
S
0 i
CM
216 274.24152 m
214.23 269.52151 l
217.77 269.52151 l
h
216 274.24152 m
f
0 J
0 j
1 0 0 -1 0 300 cm
216 25.758484 m
214.23 30.478483 l
217.77 30.478483 l
h
216 25.758484 m
S
1 J
1 j
0.60000002 i
72.5 18.358484 m
72.5 18.358484 106.9125 1.5128307 145.96875 2.0108278 c
179.67003 2.4405448 189.36055 11.157581 203.28679 17.381516 c
S
0 i
CM
209.81044 277.98407 m
205.02603 285.06287 l
201.55119 280.17151 l
h
209.81044 277.98407 m
f
0 J
0 j
1 0 0 -1 0 300 cm
209.81044 22.015932 m
205.02603 14.937131 l
201.55119 19.828503 l
h
209.81044 22.015932 m
S
1 J
1 j
0.60000002 i
224 21.216969 m
224 21.216969 258.41251 4.371315 297.46875 4.8693118 c
331.17001 5.2990289 340.86053 14.016065 354.78677 20.24 c
S
0 i
CM
361.31046 275.12558 m
356.52603 282.20438 l
353.05121 277.31302 l
h
361.31046 275.12558 m
f
0 J
0 j
1 0 0 -1 0 300 cm
361.31046 24.874416 m
356.52603 17.795614 l
353.05121 22.686985 l
h
361.31046 24.874416 m
S
CM
303.64859 261.55573 m
304.42963 260.77469 304.42963 259.50836 303.64859 258.72729 c
302.86755 257.94626 301.6012 257.94626 300.82016 258.72729 c
300.03912 259.50836 300.03912 260.77469 300.82016 261.55573 c
301.6012 262.33679 302.86755 262.33679 303.64859 261.55573 c
f
1 J
1 j
0.60000002 i
1 0 0 -1 0 300 cm
303.64859 38.444271 m
304.42963 39.225319 304.42963 40.49165 303.64859 41.272697 c
302.86755 42.053749 301.6012 42.053749 300.82016 41.272697 c
300.03912 40.49165 300.03912 39.225319 300.82016 38.444271 c
301.6012 37.663219 302.86755 37.663219 303.64859 38.444271 c
S
0 i
CM
311.14859 261.55573 m
311.92963 260.77469 311.92963 259.50836 311.14859 258.72729 c
310.36755 257.94626 309.1012 257.94626 308.32016 258.72729 c
307.53912 259.50836 307.53912 260.77469 308.32016 261.55573 c
309.1012 262.33679 310.36755 262.33679 311.14859 261.55573 c
f
0.60000002 i
1 0 0 -1 0 300 cm
311.14859 38.444271 m
311.92963 39.225319 311.92963 40.49165 311.14859 41.272697 c
310.36755 42.053749 309.1012 42.053749 308.32016 41.272697 c
307.53912 40.49165 307.53912 39.225319 308.32016 38.444271 c
309.1012 37.663219 310.36755 37.663219 311.14859 38.444271 c
S
0 i
CM
319.14859 261.55573 m
319.92963 260.77469 319.92963 259.50836 319.14859 258.72729 c
318.36755 257.94626 317.1012 257.94626 316.32016 258.72729 c
315.53912 259.50836 315.53912 260.77469 316.32016 261.55573 c
317.1012 262.33679 318.36755 262.33679 319.14859 261.55573 c
f
0.60000002 i
1 0 0 -1 0 300 cm
319.14859 38.444271 m
319.92963 39.225319 319.92963 40.49165 319.14859 41.272697 c
318.36755 42.053749 317.1012 42.053749 316.32016 41.272697 c
315.53912 40.49165 315.53912 39.225319 316.32016 38.444271 c
317.1012 37.663219 318.36755 37.663219 319.14859 38.444271 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 18.03125 181.5 cm
-2.78 3.8600006 m
(")s
1 0 0 -1 47.109375 181.5 cm
-2.78 3.8600006 m
(#)s
1 0 0 -1 73.09375 181.5 cm
-2.78 3.8600006 m
($)s
1 0 0 -1 376.4375 181.5 cm
-3.6099999 3.8600006 m
(%)s
/Cs1 SC
0 0 0 sc
CM
95.414215 194.91422 m
96.195267 194.13316 96.195267 192.86684 95.414215 192.08578 c
94.633163 191.30473 93.366837 191.30473 92.585785 192.08578 c
91.804733 192.86684 91.804733 194.13316 92.585785 194.91422 c
93.366837 195.69527 94.633163 195.69527 95.414215 194.91422 c
f
0.60000002 i
1 0 0 -1 0 300 cm
95.414215 105.08578 m
96.195267 105.86684 96.195267 107.13316 95.414215 107.91422 c
94.633163 108.69527 93.366837 108.69527 92.585785 107.91422 c
91.804733 107.13316 91.804733 105.86684 92.585785 105.08578 c
93.366837 104.30473 94.633163 104.30473 95.414215 105.08578 c
S
0 i
CM
102.91422 194.91422 m
103.69527 194.13316 103.69527 192.86684 102.91422 192.08578 c
102.13316 191.30473 100.86684 191.30473 100.08578 192.08578 c
99.304733 192.86684 99.304733 194.13316 100.08578 194.91422 c
100.86684 195.69527 102.13316 195.69527 102.91422 194.91422 c
f
0.60000002 i
1 0 0 -1 0 300 cm
102.91422 105.08578 m
103.69527 105.86684 103.69527 107.13316 102.91422 107.91422 c
102.13316 108.69527 100.86684 108.69527 100.08578 107.91422 c
99.304733 107.13316 99.304733 105.86684 100.08578 105.08578 c
100.86684 104.30473 102.13316 104.30473 102.91422 105.08578 c
S
0 i
CM
110.91422 194.91422 m
111.69527 194.13316 111.69527 192.86684 110.91422 192.08578 c
110.13316 191.30473 108.86684 191.30473 108.08578 192.08578 c
107.30473 192.86684 107.30473 194.13316 108.08578 194.91422 c
108.86684 195.69527 110.13316 195.69527 110.91422 194.91422 c
f
0.60000002 i
1 0 0 -1 0 300 cm
110.91422 105.08578 m
111.69527 105.86684 111.69527 107.13316 110.91422 107.91422 c
110.13316 108.69527 108.86684 108.69527 108.08578 107.91422 c
107.30473 107.13316 107.30473 105.86684 108.08578 105.08578 c
108.86684 104.30473 110.13316 104.30473 110.91422 105.08578 c
S
0 i
CM
233.19547 194.91422 m
233.97652 194.13316 233.97652 192.86684 233.19547 192.08578 c
232.41441 191.30473 231.14809 191.30473 230.36703 192.08578 c
229.58598 192.86684 229.58598 194.13316 230.36703 194.91422 c
231.14809 195.69527 232.41441 195.69527 233.19547 194.91422 c
f
0.60000002 i
1 0 0 -1 0 300 cm
233.19547 105.08578 m
233.97652 105.86684 233.97652 107.13316 233.19547 107.91422 c
232.41441 108.69527 231.14809 108.69527 230.36703 107.91422 c
229.58598 107.13316 229.58598 105.86684 230.36703 105.08578 c
231.14809 104.30473 232.41441 104.30473 233.19547 105.08578 c
S
0 i
CM
240.69547 194.91422 m
241.47652 194.13316 241.47652 192.86684 240.69547 192.08578 c
239.91441 191.30473 238.64809 191.30473 237.86703 192.08578 c
237.08598 192.86684 237.08598 194.13316 237.86703 194.91422 c
238.64809 195.69527 239.91441 195.69527 240.69547 194.91422 c
f
0.60000002 i
1 0 0 -1 0 300 cm
240.69547 105.08578 m
241.47652 105.86684 241.47652 107.13316 240.69547 107.91422 c
239.91441 108.69527 238.64809 108.69527 237.86703 107.91422 c
237.08598 107.13316 237.08598 105.86684 237.86703 105.08578 c
238.64809 104.30473 239.91441 104.30473 240.69547 105.08578 c
S
0 i
CM
248.69547 194.91422 m
249.47652 194.13316 249.47652 192.86684 248.69547 192.08578 c
247.91441 191.30473 246.64809 191.30473 245.86703 192.08578 c
245.08598 192.86684 245.08598 194.13316 245.86703 194.91422 c
246.64809 195.69527 247.91441 195.69527 248.69547 194.91422 c
f
0.60000002 i
1 0 0 -1 0 300 cm
248.69547 105.08578 m
249.47652 105.86684 249.47652 107.13316 248.69547 107.91422 c
247.91441 108.69527 246.64809 108.69527 245.86703 107.91422 c
245.08598 107.13316 245.08598 105.86684 245.86703 105.08578 c
246.64809 104.30473 247.91441 104.30473 248.69547 105.08578 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 202 174.35849 cm
/F2.1[ 10 0 0 -10 0 0]sf
-37.959999 3.8549652 m
(!""#$%&'%\(\)*"+*,)[ 6.850000 3.890000 3.890000 5.740000 5.190000 2.780000 6.110000 3.330000 2.780000 6.110000 5.930000 5.740000 3.890000 2.580000 5.740000 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 300 cm
7.03125 230.99997 m
9.7700891 224.39841 l
386.92752 225.01169 l
390.46875 231.49997 l
S
1 w
203.23068 224.86328 m
203.23068 219.12 l
S
0 i
CM
203.23068 85.599998 m
201.46068 80.879997 l
205.00067 80.879997 l
h
203.23068 85.599998 m
f
0 J
0 j
1 0 0 -1 0 300 cm
203.23068 214.39999 m
201.46068 219.12 l
205.00067 219.12 l
h
203.23068 214.39999 m
S
/Cs2 SC
0 sc
1 0 0 -1 397.85156 177.5 cm
/F1.1[ 10 0 0 -10 0 0]sf
-17.225 3.8600006 m
(&'\(\)*\(+)[ 7.600000 5.560000 5.370000 3.330000 2.220000 5.370000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 300 cm
6.1328125 238.86328 m
33.664062 238.86328 l
33.664062 263.86328 l
6.1328125 263.86328 l
h
6.1328125 238.86328 m
S
33.664062 238.86328 m
61.195312 238.86328 l
61.195312 263.86328 l
33.664062 263.86328 l
h
33.664062 238.86328 m
S
61.195312 238.86328 m
88.726562 238.86328 l
88.726562 263.86328 l
61.195312 263.86328 l
h
61.195312 238.86328 m
S
88.726562 238.86328 m
116.25781 238.86328 l
116.25781 263.86328 l
88.726562 263.86328 l
h
88.726562 238.86328 m
S
116.25781 238.86328 m
143.78906 238.86328 l
143.78906 263.86328 l
116.25781 263.86328 l
h
116.25781 238.86328 m
S
143.78906 238.86328 m
171.32031 238.86328 l
171.32031 263.86328 l
143.78906 263.86328 l
h
143.78906 238.86328 m
S
171.32031 238.86328 m
198.85156 238.86328 l
198.85156 263.86328 l
171.32031 263.86328 l
h
171.32031 238.86328 m
S
198.85156 238.86328 m
226.38281 238.86328 l
226.38281 263.86328 l
198.85156 263.86328 l
h
198.85156 238.86328 m
S
226.38281 238.86328 m
253.91406 238.86328 l
253.91406 263.86328 l
226.38281 263.86328 l
h
226.38281 238.86328 m
S
253.91406 238.86328 m
281.44531 238.86328 l
281.44531 263.86328 l
253.91406 263.86328 l
h
253.91406 238.86328 m
S
281.44531 238.86328 m
308.97656 238.86328 l
308.97656 263.86328 l
281.44531 263.86328 l
h
281.44531 238.86328 m
S
308.97656 238.86328 m
336.50781 238.86328 l
336.50781 263.86328 l
308.97656 263.86328 l
h
308.97656 238.86328 m
S
336.50781 238.86328 m
364.03906 238.86328 l
364.03906 263.86328 l
336.50781 263.86328 l
h
336.50781 238.86328 m
S
364.03906 238.86328 m
391.57031 238.86328 l
391.57031 263.86328 l
364.03906 263.86328 l
h
364.03906 238.86328 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 19.132812 29.636719 cm
-2.78 3.8600006 m
(")s
1 0 0 -1 48.210938 29.636719 cm
-2.78 3.8600006 m
(#)s
1 0 0 -1 74.195312 29.636719 cm
-2.78 3.8600006 m
($)s
1 0 0 -1 377.53906 29.636719 cm
-3.6099999 3.8600006 m
(%)s
/Cs1 SC
0 0 0 sc
CM
96.515778 43.05093 m
97.296829 42.269882 97.296829 41.003555 96.515778 40.222507 c
95.734726 39.441456 94.468399 39.441456 93.687347 40.222507 c
92.906296 41.003555 92.906296 42.269882 93.687347 43.05093 c
94.468399 43.831982 95.734726 43.831982 96.515778 43.05093 c
f
0.60000002 i
1 0 0 -1 0 300 cm
96.515778 256.94907 m
97.296829 257.7301 97.296829 258.99646 96.515778 259.7775 c
95.734726 260.55853 94.468399 260.55853 93.687347 259.7775 c
92.906296 258.99646 92.906296 257.7301 93.687347 256.94907 c
94.468399 256.16803 95.734726 256.16803 96.515778 256.94907 c
S
0 i
CM
104.01578 43.05093 m
104.79683 42.269882 104.79683 41.003555 104.01578 40.222507 c
103.23473 39.441456 101.9684 39.441456 101.18735 40.222507 c
100.4063 41.003555 100.4063 42.269882 101.18735 43.05093 c
101.9684 43.831982 103.23473 43.831982 104.01578 43.05093 c
f
0.60000002 i
1 0 0 -1 0 300 cm
104.01578 256.94907 m
104.79683 257.7301 104.79683 258.99646 104.01578 259.7775 c
103.23473 260.55853 101.9684 260.55853 101.18735 259.7775 c
100.4063 258.99646 100.4063 257.7301 101.18735 256.94907 c
101.9684 256.16803 103.23473 256.16803 104.01578 256.94907 c
S
0 i
CM
112.01578 43.05093 m
112.79683 42.269882 112.79683 41.003555 112.01578 40.222507 c
111.23473 39.441456 109.9684 39.441456 109.18735 40.222507 c
108.4063 41.003555 108.4063 42.269882 109.18735 43.05093 c
109.9684 43.831982 111.23473 43.831982 112.01578 43.05093 c
f
0.60000002 i
1 0 0 -1 0 300 cm
112.01578 256.94907 m
112.79683 257.7301 112.79683 258.99646 112.01578 259.7775 c
111.23473 260.55853 109.9684 260.55853 109.18735 259.7775 c
108.4063 258.99646 108.4063 257.7301 109.18735 256.94907 c
109.9684 256.16803 111.23473 256.16803 112.01578 256.94907 c
S
0 i
CM
234.29703 43.05093 m
235.07808 42.269882 235.07808 41.003555 234.29703 40.222507 c
233.51598 39.441456 232.24965 39.441456 231.4686 40.222507 c
230.68755 41.003555 230.68755 42.269882 231.4686 43.05093 c
232.24965 43.831982 233.51598 43.831982 234.29703 43.05093 c
f
0.60000002 i
1 0 0 -1 0 300 cm
234.29703 256.94907 m
235.07808 257.7301 235.07808 258.99646 234.29703 259.7775 c
233.51598 260.55853 232.24965 260.55853 231.4686 259.7775 c
230.68755 258.99646 230.68755 257.7301 231.4686 256.94907 c
232.24965 256.16803 233.51598 256.16803 234.29703 256.94907 c
S
0 i
CM
241.79703 43.05093 m
242.57808 42.269882 242.57808 41.003555 241.79703 40.222507 c
241.01598 39.441456 239.74965 39.441456 238.9686 40.222507 c
238.18755 41.003555 238.18755 42.269882 238.9686 43.05093 c
239.74965 43.831982 241.01598 43.831982 241.79703 43.05093 c
f
0.60000002 i
1 0 0 -1 0 300 cm
241.79703 256.94907 m
242.57808 257.7301 242.57808 258.99646 241.79703 259.7775 c
241.01598 260.55853 239.74965 260.55853 238.9686 259.7775 c
238.18755 258.99646 238.18755 257.7301 238.9686 256.94907 c
239.74965 256.16803 241.01598 256.16803 241.79703 256.94907 c
S
0 i
CM
249.79703 43.05093 m
250.57808 42.269882 250.57808 41.003555 249.79703 40.222507 c
249.01598 39.441456 247.74965 39.441456 246.9686 40.222507 c
246.18755 41.003555 246.18755 42.269882 246.9686 43.05093 c
247.74965 43.831982 249.01598 43.831982 249.79703 43.05093 c
f
0.60000002 i
1 0 0 -1 0 300 cm
249.79703 256.94907 m
250.57808 257.7301 250.57808 258.99646 249.79703 259.7775 c
249.01598 260.55853 247.74965 260.55853 246.9686 259.7775 c
246.18755 258.99646 246.18755 257.7301 246.9686 256.94907 c
247.74965 256.16803 249.01598 256.16803 249.79703 256.94907 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 203.10156 16.495203 cm
/F2.1[ 10 0 0 -10 0 0]sf
-22.684999 3.8549652 m
(-#.#/#,*)[ 7.410000 5.740000 3.520000 5.740000 6.110000 5.740000 5.370000 0.000000 ] xS
1 0 0 -1 403.95312 24.636719 cm
/F1.1[ 10 0 0 -10 0 0]sf
-21.299999 3.8600006 m
(,-!-.-+\()[ 7.040000 5.370000 3.150000 5.370000 5.930000 5.370000 5.000000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 300 cm
22.632812 132 m
189.78622 205.36119 l
S
0 i
CM
197.11176 91.423737 m
190.99187 97.385872 l
188.58057 91.891731 l
h
197.11176 91.423737 m
f
0 J
0 j
1 0 0 -1 0 300 cm
197.11176 208.57626 m
190.99187 202.61412 l
188.58057 208.10828 l
h
197.11176 208.57626 m
S
1 J
1 j
0.60000002 i
53.132812 130 m
194.40651 201.85555 l
S
0 i
CM
201.53716 94.517624 m
195.76657 100.81845 l
193.04645 95.470467 l
h
201.53716 94.517624 m
f
0 J
0 j
1 0 0 -1 0 300 cm
201.53716 205.48238 m
195.76657 199.18155 l
193.04645 204.52954 l
h
201.53716 205.48238 m
S
1 J
1 j
0.60000002 i
85.132812 129.5 m
194.92902 200.83672 l
S
0 i
CM
201.63744 94.804695 m
196.56349 101.67893 l
193.29456 96.647621 l
h
201.63744 94.804695 m
f
0 J
0 j
1 0 0 -1 0 300 cm
201.63744 205.19531 m
196.56349 198.32108 l
193.29456 203.35237 l
h
201.63744 205.19531 m
S
1 J
1 j
0.60000002 i
131.63281 128 m
197.44801 197.97603 l
S
0 i
CM
202.92896 96.196518 m
199.6333 104.07933 l
195.26271 99.96862 l
h
202.92896 96.196518 m
f
0 J
0 j
1 0 0 -1 0 300 cm
202.92896 203.80348 m
199.6333 195.92067 l
195.26271 200.03139 l
h
202.92896 203.80348 m
S
1 J
1 j
0.60000002 i
158.63281 131.5 m
198.45067 196.31464 l
S
0 i
CM
202.63826 96.868912 m
201.00685 105.25571 l
195.8945 102.11502 l
h
202.63826 96.868912 m
f
0 J
0 j
1 0 0 -1 0 300 cm
202.63826 203.13109 m
201.00685 194.74429 l
195.8945 197.88498 l
h
202.63826 203.13109 m
S
1 J
1 j
0.60000002 i
191.16406 137.90625 m
201.77222 195.59761 l
S
0 i
CM
203.75885 96.652985 m
204.67825 105.14738 l
198.8662 103.6574 l
h
203.75885 96.652985 m
f
0 J
0 j
1 0 0 -1 0 300 cm
203.75885 203.34702 m
204.67825 194.85262 l
198.8662 196.34261 l
h
203.75885 203.34702 m
S
1 J
1 j
0.60000002 i
212.63281 138 m
204.6006 195.4882 l
S
0 i
CM
203.49359 96.588753 m
207.57173 104.09666 l
201.62946 104.92692 l
h
203.49359 96.588753 m
f
0 J
0 j
1 0 0 -1 0 300 cm
203.49359 203.41124 m
207.57173 195.90334 l
201.62946 195.07309 l
h
203.49359 203.41124 m
S
1 J
1 j
0.60000002 i
235.13281 138.5 m
209.35889 200.20091 l
S
0 i
CM
206.27531 92.417252 m
212.12708 98.642754 l
206.5907 100.95543 l
h
206.27531 92.417252 m
f
0 J
0 j
1 0 0 -1 0 300 cm
206.27531 207.58275 m
212.12708 201.35724 l
206.5907 199.04457 l
h
206.27531 207.58275 m
S
1 J
1 j
0.60000002 i
264.63281 133.5 m
213.35495 201.43423 l
S
0 i
CM
208.53529 92.18055 m
215.7494 96.758385 l
210.96049 100.37313 l
h
208.53529 92.18055 m
f
0 J
0 j
1 0 0 -1 0 300 cm
208.53529 207.81946 m
215.7494 203.24161 l
210.96049 199.62688 l
h
208.53529 207.81946 m
S
1 J
1 j
0.60000002 i
292.63281 133 m
212.98787 202.81033 l
S
0 i
CM
206.97179 91.916451 m
214.96532 94.933632 l
211.01042 99.445694 l
h
206.97179 91.916451 m
f
0 J
0 j
1 0 0 -1 0 300 cm
206.97179 208.08356 m
214.96532 205.06638 l
211.01042 200.55431 l
h
206.97179 208.08356 m
S
1 J
1 j
0.60000002 i
320.13281 130.5 m
215.50385 203.6627 l
S
0 i
CM
208.94771 91.752869 m
217.22301 93.878746 l
213.78468 98.795853 l
h
208.94771 91.752869 m
f
0 J
0 j
1 0 0 -1 0 300 cm
208.94771 208.24713 m
217.22301 206.12125 l
213.78468 201.20415 l
h
208.94771 208.24713 m
S
1 J
1 j
0.60000002 i
342.13281 131.5 m
212.85175 204.4846 l
S
0 i
CM
205.88522 91.582497 m
214.32658 92.902946 l
211.37691 98.127838 l
h
205.88522 91.582497 m
f
0 J
0 j
1 0 0 -1 0 300 cm
205.88522 208.4175 m
214.32658 207.09705 l
211.37691 201.87216 l
h
205.88522 208.4175 m
S
1 J
1 j
0.60000002 i
370.13281 130.5 m
213.09998 204.32324 l
S
0 i
CM
205.86009 92.273193 m
214.3763 92.9618 l
211.82364 98.391701 l
h
205.86009 92.273193 m
f
0 J
0 j
1 0 0 -1 0 300 cm
205.86009 207.72681 m
214.3763 207.03821 l
211.82364 201.60829 l
h
205.86009 207.72681 m
S
ep
end
%%Trailer
%%EOF
